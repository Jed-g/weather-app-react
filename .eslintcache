[{"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\index.js":"1","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\App.js":"2","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\reportWebVitals.js":"3","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchPage.jsx":"4","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\GeoCoordSearchField.jsx":"5","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\DropdownMenu.jsx":"6","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\ButtonMenu.jsx":"7","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\CitySearchField.jsx":"8","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchButton.jsx":"9","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\MainPage.jsx":"10","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchImage.jsx":"11","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Header.jsx":"12","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Drawer.jsx":"13","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Tabs.jsx":"14","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Daily.jsx":"15","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Hourly.jsx":"16","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Current.jsx":"17","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Map.jsx":"18"},{"size":478,"mtime":1609376734499,"results":"19","hashOfConfig":"20"},{"size":4630,"mtime":1612096384546,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":5585,"mtime":1611693436459,"results":"23","hashOfConfig":"20"},{"size":2969,"mtime":1611640424910,"results":"24","hashOfConfig":"20"},{"size":677,"mtime":1611640433325,"results":"25","hashOfConfig":"20"},{"size":1180,"mtime":1612003433703,"results":"26","hashOfConfig":"20"},{"size":11047,"mtime":1612022831959,"results":"27","hashOfConfig":"20"},{"size":3994,"mtime":1612098773545,"results":"28","hashOfConfig":"20"},{"size":3611,"mtime":1612114480040,"results":"29","hashOfConfig":"20"},{"size":1132,"mtime":1612034332852,"results":"30","hashOfConfig":"20"},{"size":1702,"mtime":1612034373253,"results":"31","hashOfConfig":"20"},{"size":4318,"mtime":1612114326121,"results":"32","hashOfConfig":"20"},{"size":1279,"mtime":1612034347893,"results":"33","hashOfConfig":"20"},{"size":210,"mtime":1612034357109,"results":"34","hashOfConfig":"20"},{"size":213,"mtime":1612034354317,"results":"35","hashOfConfig":"20"},{"size":216,"mtime":1612086503251,"results":"36","hashOfConfig":"20"},{"size":2366,"mtime":1612123747914,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"12iyec0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\index.js",[],["84","85"],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\App.js",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\reportWebVitals.js",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchPage.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\GeoCoordSearchField.jsx",["86"],"import React, { useEffect, useRef } from \"react\";\r\nimport { Grid, TextField, InputAdornment, IconButton } from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nfunction GeoCoordSearchField({\r\n  geoCoordsInFields,\r\n  setGeoCoordsInFields,\r\n  errorStateGeoCoordField,\r\n  setErrorStateGeoCoordField,\r\n}) {\r\n  const latitudeBox = useRef();\r\n  useEffect(() => latitudeBox.current.focus(), []);\r\n\r\n  useEffect(() => setErrorStateGeoCoordField(false), []);\r\n\r\n  const endAdornmentLatitude = () => {\r\n    if (geoCoordsInFields.latitude) {\r\n      return (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() =>\r\n              setGeoCoordsInFields((prevState) => {\r\n                return { ...prevState, latitude: \"\" };\r\n              })\r\n            }\r\n            onMouseDown={(e) => e.preventDefault()}\r\n            color=\"secondary\"\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const endAdornmentLongitude = () => {\r\n    if (geoCoordsInFields.longitude) {\r\n      return (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() =>\r\n              setGeoCoordsInFields((prevState) => {\r\n                return { ...prevState, longitude: \"\" };\r\n              })\r\n            }\r\n            onMouseDown={(e) => e.preventDefault()}\r\n            color=\"secondary\"\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} lg={6}>\r\n        <TextField\r\n          error={errorStateGeoCoordField}\r\n          onClick={() => setErrorStateGeoCoordField(false)}\r\n          InputProps={{ endAdornment: endAdornmentLatitude() }}\r\n          value={geoCoordsInFields.latitude}\r\n          onChange={(e) => {\r\n            setErrorStateGeoCoordField(false);\r\n            setGeoCoordsInFields((prevState) => {\r\n              return { ...prevState, latitude: e.target.value };\r\n            });\r\n          }}\r\n          inputRef={latitudeBox}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          label=\"Latitude (N/S)\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} lg={6}>\r\n        <TextField\r\n          error={errorStateGeoCoordField}\r\n          onClick={() => setErrorStateGeoCoordField(false)}\r\n          InputProps={{ endAdornment: endAdornmentLongitude() }}\r\n          value={geoCoordsInFields.longitude}\r\n          onChange={(e) => {\r\n            setErrorStateGeoCoordField(false);\r\n            setGeoCoordsInFields((prevState) => {\r\n              return { ...prevState, longitude: e.target.value };\r\n            });\r\n          }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          label=\"Longitude (E/W)\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default GeoCoordSearchField;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\DropdownMenu.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\ButtonMenu.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\CitySearchField.jsx",["87","88","89","90"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Popper,\r\n  Grow,\r\n  MenuItem,\r\n  ClickAwayListener,\r\n  Paper,\r\n  MenuList,\r\n  LinearProgress,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport diacritics from \"diacritics\";\r\n\r\nimport CITY_LIST from \"../../api/city.list.min.json\";\r\n\r\nconst removeDiacritics = diacritics.remove;\r\n\r\nfunction calculateClosestMatches(\r\n  bestFitArray,\r\n  cityList,\r\n  cityName,\r\n  howManyMax,\r\n  steps,\r\n  iteration,\r\n  setListOfSuggestions,\r\n  breakBetweenIterationsInMs,\r\n  cancelExec,\r\n  executingAutocompleteLookup\r\n) {\r\n  cityList\r\n    .slice(\r\n      Math.floor((iteration * cityList.length) / steps),\r\n      Math.floor(((iteration + 1) * cityList.length) / steps)\r\n    )\r\n    .forEach((city) => {\r\n      let min = Infinity;\r\n      const posOfCity = city.name.toLowerCase().search(cityName.toLowerCase());\r\n      if (posOfCity !== -1) {\r\n        if (city.name.length - cityName.length - 1 / (1 + posOfCity) < min) {\r\n          min = city.name.length - cityName.length - 1 / (1 + posOfCity);\r\n        }\r\n      }\r\n\r\n      const posOfCityWithoutDiacritics = removeDiacritics(city.name)\r\n        .toLowerCase()\r\n        .search(removeDiacritics(cityName).toLowerCase());\r\n      if (posOfCityWithoutDiacritics !== -1) {\r\n        if (\r\n          (city.name.length -\r\n            cityName.length -\r\n            1 / (1 + posOfCityWithoutDiacritics)) *\r\n            1.25 <\r\n          min\r\n        ) {\r\n          min =\r\n            (city.name.length -\r\n              cityName.length -\r\n              1 / (1 + posOfCityWithoutDiacritics)) *\r\n            1.25;\r\n        }\r\n      }\r\n\r\n      if (min !== Infinity) {\r\n        let indexToInsertAt = 0;\r\n        for (let i = 0; i < bestFitArray.length; i++) {\r\n          if (min >= bestFitArray[i].fitValue) {\r\n            indexToInsertAt++;\r\n          }\r\n        }\r\n        bestFitArray.splice(indexToInsertAt, 0, {\r\n          fitValue: min,\r\n          city: city,\r\n        });\r\n      }\r\n\r\n      if (bestFitArray.length > howManyMax) {\r\n        let max = -Infinity;\r\n        let indexToDelete = null;\r\n        bestFitArray.forEach((cityObject, index) => {\r\n          if (cityObject.fitValue > -0.5 && cityObject.fitValue >= max) {\r\n            max = cityObject.fitValue;\r\n            indexToDelete = index;\r\n          }\r\n        });\r\n        indexToDelete && bestFitArray.splice(indexToDelete, 1);\r\n      }\r\n    });\r\n  if (!cancelExec.current) {\r\n    if (iteration < steps - 1) {\r\n      setTimeout(\r\n        () =>\r\n          calculateClosestMatches(\r\n            bestFitArray,\r\n            cityList,\r\n            cityName,\r\n            howManyMax,\r\n            steps,\r\n            iteration + 1,\r\n            setListOfSuggestions,\r\n            breakBetweenIterationsInMs,\r\n            cancelExec,\r\n            executingAutocompleteLookup\r\n          ),\r\n        breakBetweenIterationsInMs\r\n      );\r\n    } else {\r\n      executingAutocompleteLookup.current = false;\r\n      if (cityName) {\r\n        setListOfSuggestions(bestFitArray);\r\n      } else {\r\n        setListOfSuggestions([]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction CitySearchField({\r\n  listOfSuggestions,\r\n  setListOfSuggestions,\r\n  errorStateCityNameField,\r\n  setErrorStateCityNameField,\r\n  cityNameInField,\r\n  setCityNameInField,\r\n  executingAutocompleteLookup,\r\n  suggestionCurrentlySelected,\r\n  setSuggestionCurrentlySelected,\r\n}) {\r\n  const textFieldInner = useRef();\r\n  useEffect(() => textFieldInner.current.focus(), []);\r\n\r\n  useEffect(() => setErrorStateCityNameField(false), []);\r\n\r\n  useEffect(() => setSuggestionCurrentlySelected(0), []);\r\n\r\n  const cancelExec = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const breakBetweenIterationsInMs = 5;\r\n    cancelExec.current = executingAutocompleteLookup.current;\r\n    if (CITY_LIST) {\r\n      setTimeout(() => {\r\n        executingAutocompleteLookup.current = true;\r\n        setListOfSuggestions((prev) => prev);\r\n        cancelExec.current = false;\r\n        calculateClosestMatches(\r\n          [],\r\n          CITY_LIST,\r\n          cityNameInField.replace(/[#^$|/\\\\{}()?*+.[\\]]/g, \"\"),\r\n          5,\r\n          30,\r\n          0,\r\n          setListOfSuggestions,\r\n          breakBetweenIterationsInMs,\r\n          cancelExec,\r\n          executingAutocompleteLookup\r\n        );\r\n      }, 2 * breakBetweenIterationsInMs);\r\n    }\r\n  }, [cityNameInField]);\r\n\r\n  const textField = useRef();\r\n  const [textFieldWidth, setTextFieldWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setTextFieldWidth(window.getComputedStyle(textField.current).width);\r\n    const resizeEventFunction = () => {\r\n      setTextFieldWidth(window.getComputedStyle(textField.current).width);\r\n    };\r\n    window.addEventListener(\"resize\", resizeEventFunction);\r\n\r\n    return () => window.removeEventListener(\"resize\", resizeEventFunction);\r\n  }, []);\r\n\r\n  const listOfSuggestionsPersist = useRef();\r\n  listOfSuggestionsPersist.current = listOfSuggestions;\r\n\r\n  useEffect(() => {\r\n    const eventListenerFunction = function (e) {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n\r\n      switch (e.key) {\r\n        case \"ArrowUp\":\r\n          setSuggestionCurrentlySelected((prev) =>\r\n            prev - 1 >= 0 ? prev - 1 : prev\r\n          );\r\n          break;\r\n        case \"ArrowDown\":\r\n          setSuggestionCurrentlySelected((prev) =>\r\n            prev + 1 < listOfSuggestionsPersist.current.length ? prev + 1 : prev\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", eventListenerFunction);\r\n\r\n    const addKeydownEventListenerOnKeyupFunction = function () {\r\n      document.addEventListener(\"keydown\", eventListenerFunction);\r\n    };\r\n\r\n    document.addEventListener(\"keyup\", addKeydownEventListenerOnKeyupFunction);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n      document.removeEventListener(\r\n        \"keyup\",\r\n        addKeydownEventListenerOnKeyupFunction\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  const endAdornment = () => {\r\n    if (cityNameInField) {\r\n      return (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() => {\r\n              setCityNameInField(\"\");\r\n            }}\r\n            onMouseDown={(e) => e.preventDefault()}\r\n            color=\"secondary\"\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const [redirect, setRedirect] = useState(null);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <>\r\n      {redirect}\r\n      <ClickAwayListener onClickAway={() => setAnchorEl(null)}>\r\n        <div>\r\n          <TextField\r\n            error={errorStateCityNameField}\r\n            ref={textField}\r\n            InputProps={{ endAdornment: endAdornment() }}\r\n            value={cityNameInField}\r\n            onChange={(e) => {\r\n              setSuggestionCurrentlySelected(0);\r\n              setCityNameInField(e.target.value);\r\n              setErrorStateCityNameField(false);\r\n              setAnchorEl(textField.current);\r\n            }}\r\n            variant=\"outlined\"\r\n            inputRef={textFieldInner}\r\n            fullWidth\r\n            label=\"City Name\"\r\n            onClick={(e) => {\r\n              setAnchorEl(e.currentTarget);\r\n              setErrorStateCityNameField(false);\r\n            }}\r\n          />\r\n          {executingAutocompleteLookup.current && (\r\n            <Popper\r\n              style={{ zIndex: 1500, width: textFieldWidth }}\r\n              open={open}\r\n              anchorEl={anchorEl}\r\n              role={undefined}\r\n              transition\r\n              disablePortal\r\n            >\r\n              {({ TransitionProps, placement }) => (\r\n                <Grow\r\n                  {...TransitionProps}\r\n                  style={{\r\n                    transformOrigin:\r\n                      placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                  }}\r\n                >\r\n                  <Paper style={{ height: \"30px\" }}>\r\n                    <LinearProgress\r\n                      style={{\r\n                        width: `calc(${textFieldWidth} - 40px)`,\r\n                        top: \"50%\",\r\n                        left: \"50%\",\r\n                        transform: \"translate(-50%, -50%)\",\r\n                      }}\r\n                    />\r\n                  </Paper>\r\n                </Grow>\r\n              )}\r\n            </Popper>\r\n          )}\r\n          {!executingAutocompleteLookup.current &&\r\n            listOfSuggestions.length !== 0 && (\r\n              <Popper\r\n                style={{ zIndex: 1500, width: textFieldWidth }}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n              >\r\n                {({ TransitionProps, placement }) => (\r\n                  <Grow\r\n                    {...TransitionProps}\r\n                    style={{\r\n                      transformOrigin:\r\n                        placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                    }}\r\n                  >\r\n                    <Paper>\r\n                      <MenuList>\r\n                        {listOfSuggestions.map((cityObject, index) => {\r\n                          return (\r\n                            <div key={cityObject.city.id}>\r\n                              <MenuItem\r\n                                onClick={() =>\r\n                                  executingAutocompleteLookup.current ||\r\n                                  setRedirect(\r\n                                    <Redirect\r\n                                      push\r\n                                      to={`/${cityObject.city.id}`}\r\n                                    />\r\n                                  )\r\n                                }\r\n                                selected={index === suggestionCurrentlySelected}\r\n                              >\r\n                                {cityObject.city.name}\r\n                                {cityObject.city.state &&\r\n                                  `, ${cityObject.city.state}`}\r\n                                {cityObject.city.country &&\r\n                                  `, ${cityObject.city.country}`}\r\n                              </MenuItem>\r\n                              {listOfSuggestions.length - 1 === index || (\r\n                                <Divider />\r\n                              )}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </MenuList>\r\n                    </Paper>\r\n                  </Grow>\r\n                )}\r\n              </Popper>\r\n            )}\r\n        </div>\r\n      </ClickAwayListener>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CitySearchField;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchButton.jsx",["91"],"import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport Coordinates from \"coordinate-parser\";\r\nimport { ApiKeysContext } from \"../../App\";\r\n\r\nfunction handleClick({\r\n  isSearchTypeCitySelected,\r\n  listOfSuggestionsPersist,\r\n  setErrorStateCityNameField,\r\n  setErrorStateGeoCoordField,\r\n  geoCoordsInFields,\r\n  API_KEY,\r\n  setRedirect,\r\n  suggestionCurrentlySelected,\r\n}) {\r\n  if (isSearchTypeCitySelected) {\r\n    if (listOfSuggestionsPersist.current.length !== 0) {\r\n      setRedirect(\r\n        <Redirect\r\n          push\r\n          to={`/${listOfSuggestionsPersist.current[suggestionCurrentlySelected].city.id}`}\r\n        />\r\n      );\r\n    } else {\r\n      setErrorStateCityNameField(true);\r\n    }\r\n  } else {\r\n    handleGeoCoords({\r\n      geoCoordsInFields,\r\n      setErrorStateGeoCoordField,\r\n      API_KEY,\r\n      setRedirect,\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleGeoCoords({\r\n  geoCoordsInFields,\r\n  setErrorStateGeoCoordField,\r\n  API_KEY,\r\n  setRedirect,\r\n}) {\r\n  let onlyLatitudeThrewError = false;\r\n  try {\r\n    new Coordinates(geoCoordsInFields.latitude);\r\n  } catch (err) {\r\n    onlyLatitudeThrewError = true;\r\n  }\r\n\r\n  let onlyLongitudeThrewError = false;\r\n  try {\r\n    new Coordinates(geoCoordsInFields.longitude);\r\n  } catch (err) {\r\n    onlyLongitudeThrewError = true;\r\n  }\r\n\r\n  let coordinates;\r\n\r\n  try {\r\n    coordinates = new Coordinates(\r\n      `${geoCoordsInFields.latitude}, ${geoCoordsInFields.longitude}`\r\n    );\r\n  } catch (err) {}\r\n\r\n  if (coordinates && onlyLatitudeThrewError && onlyLongitudeThrewError) {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${coordinates.getLatitude()}&lon=${coordinates.getLongitude()}&appid=${API_KEY}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      setErrorStateGeoCoordField(true);\r\n    } else {\r\n      const data = await response.json();\r\n      const verifyResponseById = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?id=${data.id}&appid=${API_KEY}`\r\n      );\r\n      if (!verifyResponseById.ok) {\r\n        setErrorStateGeoCoordField(true);\r\n      } else {\r\n        setRedirect(<Redirect push to={`/${data.id}`} />);\r\n      }\r\n    }\r\n  } else {\r\n    setErrorStateGeoCoordField(true);\r\n  }\r\n}\r\n\r\nfunction SearchButton(props) {\r\n  const buttonRef = useRef();\r\n  const [redirect, setRedirect] = useState(null);\r\n\r\n  const listOfSuggestionsPersist = useRef();\r\n  listOfSuggestionsPersist.current = props.listOfSuggestions;\r\n\r\n  useEffect(() => {\r\n    const eventListenerFunction = function (e) {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n      if (e.key === \"Enter\") {\r\n        !props.executingAutocompleteLookup.current &&\r\n          buttonRef.current &&\r\n          buttonRef.current.click();\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", eventListenerFunction);\r\n\r\n    const addKeydownEventListenerOnKeyupFunction = function () {\r\n      document.addEventListener(\"keydown\", eventListenerFunction);\r\n    };\r\n\r\n    document.addEventListener(\"keyup\", addKeydownEventListenerOnKeyupFunction);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n      document.removeEventListener(\r\n        \"keyup\",\r\n        addKeydownEventListenerOnKeyupFunction\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  const API_KEY = useContext(ApiKeysContext).API_KEY_OPENWEATHERMAP;\r\n\r\n  return (\r\n    <>\r\n      {redirect}\r\n      <Button\r\n        ref={buttonRef}\r\n        fullWidth\r\n        startIcon={<ExploreIcon />}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={() =>\r\n          handleClick({\r\n            ...props,\r\n            API_KEY,\r\n            setRedirect,\r\n            listOfSuggestionsPersist,\r\n          })\r\n        }\r\n      >\r\n        Search\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchButton;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\MainPage.jsx",["92"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ApiKeysContext } from \"../../App\";\r\nimport { Switch as RouterSwitch, Route, useHistory } from \"react-router-dom\";\r\nimport Current from \"./Current\";\r\nimport Hourly from \"./Hourly\";\r\nimport Daily from \"./Daily\";\r\nimport { CircularProgress, Snackbar } from \"@material-ui/core\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Map from \"./Map\";\r\n\r\nasync function fetchUsingOneCallAPI(id, setStationData, API_KEY, history) {\r\n  // OneCallAPI only accepts geoCoord requests, so the coordinates are first found using the traditional api\r\n  const currentWeatherDataAPIResponse = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${API_KEY}`\r\n  );\r\n\r\n  if (!currentWeatherDataAPIResponse.ok) {\r\n    history.push(\"/\");\r\n    return;\r\n  }\r\n\r\n  const currentWeatherDataAPIResponseJSON = await currentWeatherDataAPIResponse.json();\r\n\r\n  const oneCallAPIResponseJSON = await (\r\n    await fetch(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${currentWeatherDataAPIResponseJSON.coord.lat}&lon=${currentWeatherDataAPIResponseJSON.coord.lon}&appid=${API_KEY}`\r\n    )\r\n  ).json();\r\n\r\n  setStationData({\r\n    ...oneCallAPIResponseJSON,\r\n    city: currentWeatherDataAPIResponseJSON.name,\r\n    country: currentWeatherDataAPIResponseJSON.sys.country,\r\n  });\r\n}\r\n\r\nfunction MainPage({ match, setTabSelected }) {\r\n  const [stationData, setStationData] = useState(null);\r\n  const API_KEY = useContext(ApiKeysContext).API_KEY_OPENWEATHERMAP;\r\n\r\n  const [snackbarOpen, setSnackbarOpen] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    fetchUsingOneCallAPI(match.params.id, setStationData, API_KEY, history);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {stationData && (\r\n        <>\r\n          <Map coords={{ lat: stationData.lat, lon: stationData.lon }} />\r\n          <RouterSwitch>\r\n            <Route\r\n              exact\r\n              path={`/${match.params.id}`}\r\n              render={(props) => (\r\n                <Current\r\n                  setTabSelected={setTabSelected}\r\n                  {...props}\r\n                  stationData={stationData}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              exact\r\n              path={`/${match.params.id}/hourly`}\r\n              render={(props) => (\r\n                <Hourly\r\n                  setTabSelected={setTabSelected}\r\n                  {...props}\r\n                  stationData={stationData}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              exact\r\n              path={`/${match.params.id}/daily`}\r\n              render={(props) => (\r\n                <Daily\r\n                  setTabSelected={setTabSelected}\r\n                  {...props}\r\n                  stationData={stationData}\r\n                />\r\n              )}\r\n            />\r\n            <Route path=\"*\" render={() => history.push(\"/\")} />\r\n          </RouterSwitch>\r\n        </>\r\n      )}\r\n      {stationData && (\r\n        <Snackbar\r\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n          open={snackbarOpen}\r\n          autoHideDuration={1500}\r\n          onClose={() => setSnackbarOpen(false)}\r\n        >\r\n          <MuiAlert\r\n            elevation={4}\r\n            variant=\"filled\"\r\n            onClose={() => setSnackbarOpen(false)}\r\n            severity=\"success\"\r\n          >\r\n            Location Found\r\n          </MuiAlert>\r\n        </Snackbar>\r\n      )}\r\n      {!stationData ? <CircularProgress /> : null}\r\n    </>\r\n  );\r\n}\r\nexport default MainPage;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchImage.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Header.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Drawer.jsx",["93","94"],"import React, { useState, useContext } from \"react\";\r\nimport {\r\n  IconButton,\r\n  SwipeableDrawer,\r\n  makeStyles,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  Divider,\r\n  ListSubheader,\r\n  ListItemSecondaryAction,\r\n  Button,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport MenuRoundedIcon from \"@material-ui/icons/MenuRounded\";\r\nimport CloudIcon from \"@material-ui/icons/Cloud\";\r\nimport { SettingsContext } from \"../../App\";\r\n\r\nconst useStyles = makeStyles({\r\n  menuIcon: {\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n  },\r\n  settingButtons: {\r\n    textTransform: \"none\",\r\n  },\r\n});\r\n\r\nfunction Drawer() {\r\n  const [settings, setSettings] = useContext(SettingsContext);\r\n\r\n  const classes = useStyles();\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n\r\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={() => setIsDrawerOpen(true)}>\r\n        <MenuRoundedIcon className={classes.menuIcon} />\r\n      </IconButton>\r\n      <SwipeableDrawer\r\n        disableBackdropTransition={!iOS}\r\n        disableDiscovery={iOS}\r\n        ModalProps={{ onBackdropClick: () => setIsDrawerOpen(false) }}\r\n        anchor={\"left\"}\r\n        open={isDrawerOpen}\r\n        onOpen={() => setIsDrawerOpen(true)}\r\n        onClose={() => setIsDrawerOpen(false)}\r\n      >\r\n        <List style={{ width: 250 }}>\r\n          <ListItem>\r\n            <ListItemText\r\n              primary={\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <Typography variant=\"h6\" component=\"p\">\r\n                    Weather Forecast\r\n                  </Typography>\r\n                  <CloudIcon style={{ marginLeft: 8 }} />\r\n                </div>\r\n              }\r\n            />\r\n          </ListItem>\r\n          <Divider />\r\n          <List subheader={<ListSubheader>Settings</ListSubheader>}>\r\n            <ListItem>\r\n              <ListItemText primary=\"test1\" />\r\n              <ListItemSecondaryAction>\r\n                <ButtonGroup size=\"small\" variant=\"text\">\r\n                  <Button className={classes.settingButtons} color=\"primary\">\r\n                    Km/h\r\n                  </Button>\r\n                  <Button className={classes.settingButtons}>Mp/h</Button>\r\n                  <Button className={classes.settingButtons}>m/s</Button>\r\n                </ButtonGroup>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListItemText primary=\"test2\" />\r\n              <ListItemSecondaryAction>\r\n                <ButtonGroup size=\"small\" variant=\"text\">\r\n                  <Button className={classes.settingButtons} color=\"primary\">\r\n                    Km/h\r\n                  </Button>\r\n                  <Button className={classes.settingButtons}>Mp/h</Button>\r\n                  <Button className={classes.settingButtons}>m/s</Button>\r\n                </ButtonGroup>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListItemText primary=\"test3\" />\r\n              <ListItemSecondaryAction>\r\n                <ButtonGroup size=\"small\" variant=\"text\">\r\n                  <Button className={classes.settingButtons} color=\"primary\">\r\n                    Km/h\r\n                  </Button>\r\n                  <Button className={classes.settingButtons}>Mp/h</Button>\r\n                  <Button className={classes.settingButtons}>m/s</Button>\r\n                </ButtonGroup>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <ListItem>\r\n              <ListItemText primary=\"test4\" />\r\n              <ListItemSecondaryAction>\r\n                <ButtonGroup size=\"small\" variant=\"text\">\r\n                  <Button className={classes.settingButtons} color=\"primary\">\r\n                    Km/h\r\n                  </Button>\r\n                  <Button className={classes.settingButtons}>Mp/h</Button>\r\n                  <Button className={classes.settingButtons}>m/s</Button>\r\n                </ButtonGroup>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          </List>\r\n        </List>\r\n      </SwipeableDrawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Drawer;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Tabs.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Daily.jsx",["95"],"import React, { useEffect } from \"react\";\r\n\r\nfunction Daily({ stationData, setTabSelected }) {\r\n  useEffect(() => {\r\n    setTabSelected(2);\r\n  }, []);\r\n\r\n  return <div>Daily</div>;\r\n}\r\n\r\nexport default Daily;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Hourly.jsx",["96"],"import React, { useEffect } from \"react\";\r\n\r\nfunction Hourly({ stationData, setTabSelected }) {\r\n  useEffect(() => {\r\n    setTabSelected(1);\r\n  }, []);\r\n\r\n  return <div>Hourly</div>;\r\n}\r\n\r\nexport default Hourly;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Current.jsx",["97"],"import React, { useEffect } from \"react\";\r\n\r\nfunction Current({ stationData, setTabSelected }) {\r\n  useEffect(() => {\r\n    setTabSelected(0);\r\n  }, []);\r\n\r\n  return <div>Current</div>;\r\n}\r\n\r\nexport default Current;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Map.jsx",["98"],"import React, { useEffect, useRef, useContext } from \"react\";\r\nimport { useTheme } from \"@material-ui/core\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { ApiKeysContext } from \"../../App\";\r\n\r\nfunction rotateCamera(timestamp, offset, playAnimation, map, iteration) {\r\n  if (iteration === 2) {\r\n    offset = timestamp;\r\n  }\r\n  // clamp the rotation between 0 -360 degrees\r\n  // Divide timestamp by 100 to slow rotation to ~10 degrees / sec\r\n  map.current.rotateTo(((timestamp - offset) / 450) % 360, { duration: 0 });\r\n\r\n  playAnimation.current &&\r\n    requestAnimationFrame((timestamp) =>\r\n      rotateCamera(timestamp, offset, playAnimation, map, iteration + 1)\r\n    );\r\n}\r\n\r\nfunction Map({ coords }) {\r\n  const theme = useTheme();\r\n  const map = useRef();\r\n  const locationMarker = useRef();\r\n\r\n  const playAnimation = useRef(true);\r\n\r\n  const API_KEY_MAPBOX = useContext(ApiKeysContext).API_KEY_MAPBOX;\r\n\r\n  useEffect(() => {\r\n    if (!map.current) {\r\n      mapboxgl.accessToken = API_KEY_MAPBOX;\r\n\r\n      map.current = new mapboxgl.Map({\r\n        container: \"map\",\r\n        style:\r\n          theme.palette.type === \"dark\"\r\n            ? \"mapbox://styles/mapbox/dark-v10\"\r\n            : \"mapbox://styles/mapbox/light-v10\",\r\n        center: [coords.lon, coords.lat],\r\n        zoom: 10,\r\n        pitch: 45,\r\n        bearing: 0,\r\n        attributionControl: false,\r\n      });\r\n\r\n      map.current.on(\"load\", () => {\r\n        // Start the animation.\r\n        rotateCamera(0, 0, playAnimation, map, 1);\r\n      });\r\n\r\n      map.current.addControl(\r\n        new mapboxgl.NavigationControl({\r\n          visualizePitch: true,\r\n        })\r\n      );\r\n    } else {\r\n      map.current.setStyle(\r\n        theme.palette.type === \"dark\"\r\n          ? \"mapbox://styles/mapbox/dark-v10\"\r\n          : \"mapbox://styles/mapbox/light-v10\"\r\n      );\r\n    }\r\n\r\n    locationMarker.current?.remove();\r\n    locationMarker.current = new mapboxgl.Marker({\r\n      color: theme.palette.primary.main,\r\n    })\r\n      .setLngLat([coords.lon, coords.lat])\r\n      .addTo(map.current);\r\n  }, [theme]);\r\n\r\n  useEffect(() => () => (playAnimation.current = false), []);\r\n\r\n  return (\r\n    <div\r\n      id=\"map\"\r\n      style={{ width: \"100vw\", height: \"70vh\" }}\r\n      onMouseDown={() => (playAnimation.current = false)}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n",{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":14,"column":54,"nodeType":"105","endLine":14,"endColumn":56,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":136,"column":54,"nodeType":"105","endLine":136,"endColumn":56,"suggestions":"108"},{"ruleId":"103","severity":1,"message":"109","line":138,"column":54,"nodeType":"105","endLine":138,"endColumn":56,"suggestions":"110"},{"ruleId":"103","severity":1,"message":"111","line":164,"column":6,"nodeType":"105","endLine":164,"endColumn":23,"suggestions":"112"},{"ruleId":"103","severity":1,"message":"109","line":216,"column":6,"nodeType":"105","endLine":216,"endColumn":8,"suggestions":"113"},{"ruleId":"103","severity":1,"message":"114","line":121,"column":6,"nodeType":"105","endLine":121,"endColumn":8,"suggestions":"115"},{"ruleId":"103","severity":1,"message":"116","line":47,"column":6,"nodeType":"105","endLine":47,"endColumn":8,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":30,"column":10,"nodeType":"120","messageId":"121","endLine":30,"endColumn":18},{"ruleId":"118","severity":1,"message":"122","line":30,"column":20,"nodeType":"120","messageId":"121","endLine":30,"endColumn":31},{"ruleId":"103","severity":1,"message":"123","line":6,"column":6,"nodeType":"105","endLine":6,"endColumn":8,"suggestions":"124"},{"ruleId":"103","severity":1,"message":"123","line":6,"column":6,"nodeType":"105","endLine":6,"endColumn":8,"suggestions":"125"},{"ruleId":"103","severity":1,"message":"123","line":6,"column":6,"nodeType":"105","endLine":6,"endColumn":8,"suggestions":"126"},{"ruleId":"103","severity":1,"message":"127","line":71,"column":6,"nodeType":"105","endLine":71,"endColumn":13,"suggestions":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setErrorStateGeoCoordField'. Either include it or remove the dependency array. If 'setErrorStateGeoCoordField' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["131"],"React Hook useEffect has a missing dependency: 'setErrorStateCityNameField'. Either include it or remove the dependency array. If 'setErrorStateCityNameField' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"React Hook useEffect has a missing dependency: 'setSuggestionCurrentlySelected'. Either include it or remove the dependency array. If 'setSuggestionCurrentlySelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["133"],"React Hook useEffect has missing dependencies: 'executingAutocompleteLookup' and 'setListOfSuggestions'. Either include them or remove the dependency array. If 'setListOfSuggestions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["134"],["135"],"React Hook useEffect has a missing dependency: 'props.executingAutocompleteLookup'. Either include it or remove the dependency array.",["136"],"React Hook useEffect has missing dependencies: 'API_KEY', 'history', and 'match.params.id'. Either include them or remove the dependency array.",["137"],"no-unused-vars","'settings' is assigned a value but never used.","Identifier","unusedVar","'setSettings' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTabSelected'. Either include it or remove the dependency array. If 'setTabSelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["138"],["139"],["140"],"React Hook useEffect has missing dependencies: 'API_KEY_MAPBOX', 'coords.lat', and 'coords.lon'. Either include them or remove the dependency array.",["141"],"no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"146","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"155","fix":"157"},{"desc":"155","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [setErrorStateGeoCoordField]",{"range":"161","text":"162"},"Update the dependencies array to be: [setErrorStateCityNameField]",{"range":"163","text":"164"},"Update the dependencies array to be: [setSuggestionCurrentlySelected]",{"range":"165","text":"166"},"Update the dependencies array to be: [cityNameInField, executingAutocompleteLookup, setListOfSuggestions]",{"range":"167","text":"168"},{"range":"169","text":"166"},"Update the dependencies array to be: [props.executingAutocompleteLookup]",{"range":"170","text":"171"},"Update the dependencies array to be: [API_KEY, history, match.params.id]",{"range":"172","text":"173"},"Update the dependencies array to be: [setTabSelected]",{"range":"174","text":"175"},{"range":"176","text":"175"},{"range":"177","text":"175"},"Update the dependencies array to be: [API_KEY_MAPBOX, coords.lat, coords.lon, theme]",{"range":"178","text":"179"},[471,473],"[setErrorStateGeoCoordField]",[3675,3677],"[setErrorStateCityNameField]",[3736,3738],"[setSuggestionCurrentlySelected]",[4475,4492],"[cityNameInField, executingAutocompleteLookup, setListOfSuggestions]",[6149,6151],[3450,3452],"[props.executingAutocompleteLookup]",[1746,1748],"[API_KEY, history, match.params.id]",[146,148],"[setTabSelected]",[147,149],[148,150],[2096,2103],"[API_KEY_MAPBOX, coords.lat, coords.lon, theme]"]