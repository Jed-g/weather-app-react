[{"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\index.js":"1","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\App.js":"2","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\reportWebVitals.js":"3","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchPage.jsx":"4","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\GeoCoordSearchField.jsx":"5","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\DropdownMenu.jsx":"6","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\ButtonMenu.jsx":"7","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\CitySearchField.jsx":"8","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchButton.jsx":"9","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\MainPage.jsx":"10","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchImage.jsx":"11","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Header.jsx":"12","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Drawer.jsx":"13","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Tabs.jsx":"14","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Daily.jsx":"15","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Hourly.jsx":"16","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Map.jsx":"17","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\CurrentWeatherWidget.jsx":"18","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\DetailBox.jsx":"19","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\HourlyWidget.jsx":"20","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Today.jsx":"21","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\DailyWidget.jsx":"22","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\AdditionalInfoWidget.jsx":"23","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\SunriseSunset.jsx":"24","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\DetailList.jsx":"25"},{"size":478,"mtime":1609376734499,"results":"26","hashOfConfig":"27"},{"size":4713,"mtime":1612385261517,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":5585,"mtime":1611693436459,"results":"30","hashOfConfig":"27"},{"size":2969,"mtime":1611640424910,"results":"31","hashOfConfig":"27"},{"size":677,"mtime":1611640433325,"results":"32","hashOfConfig":"27"},{"size":1180,"mtime":1612003433703,"results":"33","hashOfConfig":"27"},{"size":11047,"mtime":1612022831959,"results":"34","hashOfConfig":"27"},{"size":3994,"mtime":1612098773545,"results":"35","hashOfConfig":"27"},{"size":4395,"mtime":1612440715131,"results":"36","hashOfConfig":"27"},{"size":1132,"mtime":1612034332852,"results":"37","hashOfConfig":"27"},{"size":1702,"mtime":1612034373253,"results":"38","hashOfConfig":"27"},{"size":7530,"mtime":1612611447288,"results":"39","hashOfConfig":"27"},{"size":1292,"mtime":1612440722676,"results":"40","hashOfConfig":"27"},{"size":13528,"mtime":1612440718939,"results":"41","hashOfConfig":"27"},{"size":12353,"mtime":1612448516838,"results":"42","hashOfConfig":"27"},{"size":3402,"mtime":1612387666887,"results":"43","hashOfConfig":"27"},{"size":2606,"mtime":1612612511728,"results":"44","hashOfConfig":"27"},{"size":718,"mtime":1612362888067,"results":"45","hashOfConfig":"27"},{"size":6178,"mtime":1612611416844,"results":"46","hashOfConfig":"27"},{"size":642,"mtime":1612611406163,"results":"47","hashOfConfig":"27"},{"size":7233,"mtime":1612611427921,"results":"48","hashOfConfig":"27"},{"size":2299,"mtime":1612611437253,"results":"49","hashOfConfig":"27"},{"size":4558,"mtime":1612611411483,"results":"50","hashOfConfig":"27"},{"size":8948,"mtime":1612612862177,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"12iyec0",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\index.js",[],["112","113"],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\App.js",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\reportWebVitals.js",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchPage.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\GeoCoordSearchField.jsx",["114"],"import React, { useEffect, useRef } from \"react\";\r\nimport { Grid, TextField, InputAdornment, IconButton } from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nfunction GeoCoordSearchField({\r\n  geoCoordsInFields,\r\n  setGeoCoordsInFields,\r\n  errorStateGeoCoordField,\r\n  setErrorStateGeoCoordField,\r\n}) {\r\n  const latitudeBox = useRef();\r\n  useEffect(() => latitudeBox.current.focus(), []);\r\n\r\n  useEffect(() => setErrorStateGeoCoordField(false), []);\r\n\r\n  const endAdornmentLatitude = () => {\r\n    if (geoCoordsInFields.latitude) {\r\n      return (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() =>\r\n              setGeoCoordsInFields((prevState) => {\r\n                return { ...prevState, latitude: \"\" };\r\n              })\r\n            }\r\n            onMouseDown={(e) => e.preventDefault()}\r\n            color=\"secondary\"\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const endAdornmentLongitude = () => {\r\n    if (geoCoordsInFields.longitude) {\r\n      return (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() =>\r\n              setGeoCoordsInFields((prevState) => {\r\n                return { ...prevState, longitude: \"\" };\r\n              })\r\n            }\r\n            onMouseDown={(e) => e.preventDefault()}\r\n            color=\"secondary\"\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} lg={6}>\r\n        <TextField\r\n          error={errorStateGeoCoordField}\r\n          onClick={() => setErrorStateGeoCoordField(false)}\r\n          InputProps={{ endAdornment: endAdornmentLatitude() }}\r\n          value={geoCoordsInFields.latitude}\r\n          onChange={(e) => {\r\n            setErrorStateGeoCoordField(false);\r\n            setGeoCoordsInFields((prevState) => {\r\n              return { ...prevState, latitude: e.target.value };\r\n            });\r\n          }}\r\n          inputRef={latitudeBox}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          label=\"Latitude (N/S)\"\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} lg={6}>\r\n        <TextField\r\n          error={errorStateGeoCoordField}\r\n          onClick={() => setErrorStateGeoCoordField(false)}\r\n          InputProps={{ endAdornment: endAdornmentLongitude() }}\r\n          value={geoCoordsInFields.longitude}\r\n          onChange={(e) => {\r\n            setErrorStateGeoCoordField(false);\r\n            setGeoCoordsInFields((prevState) => {\r\n              return { ...prevState, longitude: e.target.value };\r\n            });\r\n          }}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          label=\"Longitude (E/W)\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default GeoCoordSearchField;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\DropdownMenu.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\ButtonMenu.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\CitySearchField.jsx",["115","116","117","118"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  Popper,\r\n  Grow,\r\n  MenuItem,\r\n  ClickAwayListener,\r\n  Paper,\r\n  MenuList,\r\n  LinearProgress,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport diacritics from \"diacritics\";\r\n\r\nimport CITY_LIST from \"../../api/city.list.min.json\";\r\n\r\nconst removeDiacritics = diacritics.remove;\r\n\r\nfunction calculateClosestMatches(\r\n  bestFitArray,\r\n  cityList,\r\n  cityName,\r\n  howManyMax,\r\n  steps,\r\n  iteration,\r\n  setListOfSuggestions,\r\n  breakBetweenIterationsInMs,\r\n  cancelExec,\r\n  executingAutocompleteLookup\r\n) {\r\n  cityList\r\n    .slice(\r\n      Math.floor((iteration * cityList.length) / steps),\r\n      Math.floor(((iteration + 1) * cityList.length) / steps)\r\n    )\r\n    .forEach((city) => {\r\n      let min = Infinity;\r\n      const posOfCity = city.name.toLowerCase().search(cityName.toLowerCase());\r\n      if (posOfCity !== -1) {\r\n        if (city.name.length - cityName.length - 1 / (1 + posOfCity) < min) {\r\n          min = city.name.length - cityName.length - 1 / (1 + posOfCity);\r\n        }\r\n      }\r\n\r\n      const posOfCityWithoutDiacritics = removeDiacritics(city.name)\r\n        .toLowerCase()\r\n        .search(removeDiacritics(cityName).toLowerCase());\r\n      if (posOfCityWithoutDiacritics !== -1) {\r\n        if (\r\n          (city.name.length -\r\n            cityName.length -\r\n            1 / (1 + posOfCityWithoutDiacritics)) *\r\n            1.25 <\r\n          min\r\n        ) {\r\n          min =\r\n            (city.name.length -\r\n              cityName.length -\r\n              1 / (1 + posOfCityWithoutDiacritics)) *\r\n            1.25;\r\n        }\r\n      }\r\n\r\n      if (min !== Infinity) {\r\n        let indexToInsertAt = 0;\r\n        for (let i = 0; i < bestFitArray.length; i++) {\r\n          if (min >= bestFitArray[i].fitValue) {\r\n            indexToInsertAt++;\r\n          }\r\n        }\r\n        bestFitArray.splice(indexToInsertAt, 0, {\r\n          fitValue: min,\r\n          city: city,\r\n        });\r\n      }\r\n\r\n      if (bestFitArray.length > howManyMax) {\r\n        let max = -Infinity;\r\n        let indexToDelete = null;\r\n        bestFitArray.forEach((cityObject, index) => {\r\n          if (cityObject.fitValue > -0.5 && cityObject.fitValue >= max) {\r\n            max = cityObject.fitValue;\r\n            indexToDelete = index;\r\n          }\r\n        });\r\n        indexToDelete && bestFitArray.splice(indexToDelete, 1);\r\n      }\r\n    });\r\n  if (!cancelExec.current) {\r\n    if (iteration < steps - 1) {\r\n      setTimeout(\r\n        () =>\r\n          calculateClosestMatches(\r\n            bestFitArray,\r\n            cityList,\r\n            cityName,\r\n            howManyMax,\r\n            steps,\r\n            iteration + 1,\r\n            setListOfSuggestions,\r\n            breakBetweenIterationsInMs,\r\n            cancelExec,\r\n            executingAutocompleteLookup\r\n          ),\r\n        breakBetweenIterationsInMs\r\n      );\r\n    } else {\r\n      executingAutocompleteLookup.current = false;\r\n      if (cityName) {\r\n        setListOfSuggestions(bestFitArray);\r\n      } else {\r\n        setListOfSuggestions([]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction CitySearchField({\r\n  listOfSuggestions,\r\n  setListOfSuggestions,\r\n  errorStateCityNameField,\r\n  setErrorStateCityNameField,\r\n  cityNameInField,\r\n  setCityNameInField,\r\n  executingAutocompleteLookup,\r\n  suggestionCurrentlySelected,\r\n  setSuggestionCurrentlySelected,\r\n}) {\r\n  const textFieldInner = useRef();\r\n  useEffect(() => textFieldInner.current.focus(), []);\r\n\r\n  useEffect(() => setErrorStateCityNameField(false), []);\r\n\r\n  useEffect(() => setSuggestionCurrentlySelected(0), []);\r\n\r\n  const cancelExec = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const breakBetweenIterationsInMs = 5;\r\n    cancelExec.current = executingAutocompleteLookup.current;\r\n    if (CITY_LIST) {\r\n      setTimeout(() => {\r\n        executingAutocompleteLookup.current = true;\r\n        setListOfSuggestions((prev) => prev);\r\n        cancelExec.current = false;\r\n        calculateClosestMatches(\r\n          [],\r\n          CITY_LIST,\r\n          cityNameInField.replace(/[#^$|/\\\\{}()?*+.[\\]]/g, \"\"),\r\n          5,\r\n          30,\r\n          0,\r\n          setListOfSuggestions,\r\n          breakBetweenIterationsInMs,\r\n          cancelExec,\r\n          executingAutocompleteLookup\r\n        );\r\n      }, 2 * breakBetweenIterationsInMs);\r\n    }\r\n  }, [cityNameInField]);\r\n\r\n  const textField = useRef();\r\n  const [textFieldWidth, setTextFieldWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setTextFieldWidth(window.getComputedStyle(textField.current).width);\r\n    const resizeEventFunction = () => {\r\n      setTextFieldWidth(window.getComputedStyle(textField.current).width);\r\n    };\r\n    window.addEventListener(\"resize\", resizeEventFunction);\r\n\r\n    return () => window.removeEventListener(\"resize\", resizeEventFunction);\r\n  }, []);\r\n\r\n  const listOfSuggestionsPersist = useRef();\r\n  listOfSuggestionsPersist.current = listOfSuggestions;\r\n\r\n  useEffect(() => {\r\n    const eventListenerFunction = function (e) {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n\r\n      switch (e.key) {\r\n        case \"ArrowUp\":\r\n          setSuggestionCurrentlySelected((prev) =>\r\n            prev - 1 >= 0 ? prev - 1 : prev\r\n          );\r\n          break;\r\n        case \"ArrowDown\":\r\n          setSuggestionCurrentlySelected((prev) =>\r\n            prev + 1 < listOfSuggestionsPersist.current.length ? prev + 1 : prev\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", eventListenerFunction);\r\n\r\n    const addKeydownEventListenerOnKeyupFunction = function () {\r\n      document.addEventListener(\"keydown\", eventListenerFunction);\r\n    };\r\n\r\n    document.addEventListener(\"keyup\", addKeydownEventListenerOnKeyupFunction);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n      document.removeEventListener(\r\n        \"keyup\",\r\n        addKeydownEventListenerOnKeyupFunction\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  const endAdornment = () => {\r\n    if (cityNameInField) {\r\n      return (\r\n        <InputAdornment position=\"end\">\r\n          <IconButton\r\n            onClick={() => {\r\n              setCityNameInField(\"\");\r\n            }}\r\n            onMouseDown={(e) => e.preventDefault()}\r\n            color=\"secondary\"\r\n          >\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </InputAdornment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const [redirect, setRedirect] = useState(null);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  return (\r\n    <>\r\n      {redirect}\r\n      <ClickAwayListener onClickAway={() => setAnchorEl(null)}>\r\n        <div>\r\n          <TextField\r\n            error={errorStateCityNameField}\r\n            ref={textField}\r\n            InputProps={{ endAdornment: endAdornment() }}\r\n            value={cityNameInField}\r\n            onChange={(e) => {\r\n              setSuggestionCurrentlySelected(0);\r\n              setCityNameInField(e.target.value);\r\n              setErrorStateCityNameField(false);\r\n              setAnchorEl(textField.current);\r\n            }}\r\n            variant=\"outlined\"\r\n            inputRef={textFieldInner}\r\n            fullWidth\r\n            label=\"City Name\"\r\n            onClick={(e) => {\r\n              setAnchorEl(e.currentTarget);\r\n              setErrorStateCityNameField(false);\r\n            }}\r\n          />\r\n          {executingAutocompleteLookup.current && (\r\n            <Popper\r\n              style={{ zIndex: 1500, width: textFieldWidth }}\r\n              open={open}\r\n              anchorEl={anchorEl}\r\n              role={undefined}\r\n              transition\r\n              disablePortal\r\n            >\r\n              {({ TransitionProps, placement }) => (\r\n                <Grow\r\n                  {...TransitionProps}\r\n                  style={{\r\n                    transformOrigin:\r\n                      placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                  }}\r\n                >\r\n                  <Paper style={{ height: \"30px\" }}>\r\n                    <LinearProgress\r\n                      style={{\r\n                        width: `calc(${textFieldWidth} - 40px)`,\r\n                        top: \"50%\",\r\n                        left: \"50%\",\r\n                        transform: \"translate(-50%, -50%)\",\r\n                      }}\r\n                    />\r\n                  </Paper>\r\n                </Grow>\r\n              )}\r\n            </Popper>\r\n          )}\r\n          {!executingAutocompleteLookup.current &&\r\n            listOfSuggestions.length !== 0 && (\r\n              <Popper\r\n                style={{ zIndex: 1500, width: textFieldWidth }}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n              >\r\n                {({ TransitionProps, placement }) => (\r\n                  <Grow\r\n                    {...TransitionProps}\r\n                    style={{\r\n                      transformOrigin:\r\n                        placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n                    }}\r\n                  >\r\n                    <Paper>\r\n                      <MenuList>\r\n                        {listOfSuggestions.map((cityObject, index) => {\r\n                          return (\r\n                            <div key={cityObject.city.id}>\r\n                              <MenuItem\r\n                                onClick={() =>\r\n                                  executingAutocompleteLookup.current ||\r\n                                  setRedirect(\r\n                                    <Redirect\r\n                                      push\r\n                                      to={`/${cityObject.city.id}`}\r\n                                    />\r\n                                  )\r\n                                }\r\n                                selected={index === suggestionCurrentlySelected}\r\n                              >\r\n                                {cityObject.city.name}\r\n                                {cityObject.city.state &&\r\n                                  `, ${cityObject.city.state}`}\r\n                                {cityObject.city.country &&\r\n                                  `, ${cityObject.city.country}`}\r\n                              </MenuItem>\r\n                              {listOfSuggestions.length - 1 === index || (\r\n                                <Divider />\r\n                              )}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </MenuList>\r\n                    </Paper>\r\n                  </Grow>\r\n                )}\r\n              </Popper>\r\n            )}\r\n        </div>\r\n      </ClickAwayListener>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CitySearchField;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchButton.jsx",["119"],"import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport Coordinates from \"coordinate-parser\";\r\nimport { ApiKeysContext } from \"../../App\";\r\n\r\nfunction handleClick({\r\n  isSearchTypeCitySelected,\r\n  listOfSuggestionsPersist,\r\n  setErrorStateCityNameField,\r\n  setErrorStateGeoCoordField,\r\n  geoCoordsInFields,\r\n  API_KEY,\r\n  setRedirect,\r\n  suggestionCurrentlySelected,\r\n}) {\r\n  if (isSearchTypeCitySelected) {\r\n    if (listOfSuggestionsPersist.current.length !== 0) {\r\n      setRedirect(\r\n        <Redirect\r\n          push\r\n          to={`/${listOfSuggestionsPersist.current[suggestionCurrentlySelected].city.id}`}\r\n        />\r\n      );\r\n    } else {\r\n      setErrorStateCityNameField(true);\r\n    }\r\n  } else {\r\n    handleGeoCoords({\r\n      geoCoordsInFields,\r\n      setErrorStateGeoCoordField,\r\n      API_KEY,\r\n      setRedirect,\r\n    });\r\n  }\r\n}\r\n\r\nasync function handleGeoCoords({\r\n  geoCoordsInFields,\r\n  setErrorStateGeoCoordField,\r\n  API_KEY,\r\n  setRedirect,\r\n}) {\r\n  let onlyLatitudeThrewError = false;\r\n  try {\r\n    new Coordinates(geoCoordsInFields.latitude);\r\n  } catch (err) {\r\n    onlyLatitudeThrewError = true;\r\n  }\r\n\r\n  let onlyLongitudeThrewError = false;\r\n  try {\r\n    new Coordinates(geoCoordsInFields.longitude);\r\n  } catch (err) {\r\n    onlyLongitudeThrewError = true;\r\n  }\r\n\r\n  let coordinates;\r\n\r\n  try {\r\n    coordinates = new Coordinates(\r\n      `${geoCoordsInFields.latitude}, ${geoCoordsInFields.longitude}`\r\n    );\r\n  } catch (err) {}\r\n\r\n  if (coordinates && onlyLatitudeThrewError && onlyLongitudeThrewError) {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${coordinates.getLatitude()}&lon=${coordinates.getLongitude()}&appid=${API_KEY}`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      setErrorStateGeoCoordField(true);\r\n    } else {\r\n      const data = await response.json();\r\n      const verifyResponseById = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?id=${data.id}&appid=${API_KEY}`\r\n      );\r\n      if (!verifyResponseById.ok) {\r\n        setErrorStateGeoCoordField(true);\r\n      } else {\r\n        setRedirect(<Redirect push to={`/${data.id}`} />);\r\n      }\r\n    }\r\n  } else {\r\n    setErrorStateGeoCoordField(true);\r\n  }\r\n}\r\n\r\nfunction SearchButton(props) {\r\n  const buttonRef = useRef();\r\n  const [redirect, setRedirect] = useState(null);\r\n\r\n  const listOfSuggestionsPersist = useRef();\r\n  listOfSuggestionsPersist.current = props.listOfSuggestions;\r\n\r\n  useEffect(() => {\r\n    const eventListenerFunction = function (e) {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n      if (e.key === \"Enter\") {\r\n        !props.executingAutocompleteLookup.current &&\r\n          buttonRef.current &&\r\n          buttonRef.current.click();\r\n      }\r\n    };\r\n    document.addEventListener(\"keydown\", eventListenerFunction);\r\n\r\n    const addKeydownEventListenerOnKeyupFunction = function () {\r\n      document.addEventListener(\"keydown\", eventListenerFunction);\r\n    };\r\n\r\n    document.addEventListener(\"keyup\", addKeydownEventListenerOnKeyupFunction);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", eventListenerFunction);\r\n      document.removeEventListener(\r\n        \"keyup\",\r\n        addKeydownEventListenerOnKeyupFunction\r\n      );\r\n    };\r\n  }, []);\r\n\r\n  const API_KEY = useContext(ApiKeysContext).API_KEY_OPENWEATHERMAP;\r\n\r\n  return (\r\n    <>\r\n      {redirect}\r\n      <Button\r\n        ref={buttonRef}\r\n        fullWidth\r\n        startIcon={<ExploreIcon />}\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={() =>\r\n          handleClick({\r\n            ...props,\r\n            API_KEY,\r\n            setRedirect,\r\n            listOfSuggestionsPersist,\r\n          })\r\n        }\r\n      >\r\n        Search\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchButton;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\MainPage.jsx",["120"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ApiKeysContext } from \"../../App\";\r\nimport { Switch as RouterSwitch, Route, useHistory } from \"react-router-dom\";\r\nimport Today from \"./Today\";\r\nimport Hourly from \"./Hourly\";\r\nimport Daily from \"./Daily\";\r\nimport { CircularProgress, Snackbar, Grid } from \"@material-ui/core\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Map from \"./Map\";\r\n\r\nasync function fetchUsingOneCallAPI(id, setStationData, API_KEY, history) {\r\n  // OneCallAPI only accepts geoCoord requests, so the coordinates are first found using the traditional api\r\n  const currentWeatherDataAPIResponse = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?id=${id}&appid=${API_KEY}`\r\n  );\r\n\r\n  if (!currentWeatherDataAPIResponse.ok) {\r\n    history.push(\"/\");\r\n    return;\r\n  }\r\n\r\n  const currentWeatherDataAPIResponseJSON = await currentWeatherDataAPIResponse.json();\r\n\r\n  const oneCallAPIResponseJSON = await (\r\n    await fetch(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${currentWeatherDataAPIResponseJSON.coord.lat}&lon=${currentWeatherDataAPIResponseJSON.coord.lon}&appid=${API_KEY}`\r\n    )\r\n  ).json();\r\n\r\n  setStationData({\r\n    ...oneCallAPIResponseJSON,\r\n    city: currentWeatherDataAPIResponseJSON.name,\r\n    country: currentWeatherDataAPIResponseJSON.sys.country,\r\n  });\r\n}\r\n\r\nfunction MainPage({ match, setTabSelected }) {\r\n  const [stationData, setStationData] = useState(null);\r\n  const API_KEY = useContext(ApiKeysContext).API_KEY_OPENWEATHERMAP;\r\n\r\n  const [snackbarOpen, setSnackbarOpen] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    fetchUsingOneCallAPI(match.params.id, setStationData, API_KEY, history);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {stationData && (\r\n        <>\r\n          <Grid\r\n            justify=\"center\"\r\n            container\r\n            style={{ width: \"100%\", height: \"100%\", margin: \"40px 0 20px\" }}\r\n          >\r\n            <Grid\r\n              container\r\n              item\r\n              xs={12}\r\n              lg={8}\r\n              alignItems=\"flex-start\"\r\n              alignContent=\"flex-start\"\r\n              spacing={4}\r\n            >\r\n              <Grid item md={8} xs={12}>\r\n                <RouterSwitch>\r\n                  <Route\r\n                    exact\r\n                    path={`/${match.params.id}`}\r\n                    render={(props) => (\r\n                      <Today\r\n                        setTabSelected={setTabSelected}\r\n                        {...props}\r\n                        stationData={stationData}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path={`/${match.params.id}/hourly`}\r\n                    render={(props) => (\r\n                      <Hourly\r\n                        setTabSelected={setTabSelected}\r\n                        {...props}\r\n                        stationData={stationData}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Route\r\n                    exact\r\n                    path={`/${match.params.id}/daily`}\r\n                    render={(props) => (\r\n                      <Daily\r\n                        setTabSelected={setTabSelected}\r\n                        {...props}\r\n                        stationData={stationData}\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Route path=\"*\" render={() => history.push(\"/\")} />\r\n                </RouterSwitch>\r\n              </Grid>\r\n              <Grid item md={4} xs={12}>\r\n                <Map coords={{ lat: stationData.lat, lon: stationData.lon }} />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n      {stationData && (\r\n        <Snackbar\r\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n          open={snackbarOpen}\r\n          autoHideDuration={1500}\r\n          onClose={() => setSnackbarOpen(false)}\r\n        >\r\n          <MuiAlert\r\n            elevation={4}\r\n            variant=\"filled\"\r\n            onClose={() => setSnackbarOpen(false)}\r\n            severity=\"success\"\r\n          >\r\n            Location Found\r\n          </MuiAlert>\r\n        </Snackbar>\r\n      )}\r\n      {!stationData ? <CircularProgress /> : null}\r\n    </>\r\n  );\r\n}\r\nexport default MainPage;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\search_page\\SearchImage.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Header.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\header\\Drawer.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Tabs.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Daily.jsx",["121"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport CurrentWeatherWidget from \"./CurrentWeatherWidget\";\r\nimport {\r\n  makeStyles,\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Typography,\r\n  useTheme,\r\n  Paper,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport DetailBox from \"./DetailBox\";\r\nimport { SettingsContext } from \"../../App\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  headerDate: {\r\n    fontSize: theme.typography.pxToRem(18),\r\n    color: theme.palette.text.primary,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n    },\r\n  },\r\n  headerSmall: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.primary,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: theme.typography.pxToRem(12),\r\n    },\r\n  },\r\n  headerLarge: {\r\n    fontSize: theme.typography.pxToRem(21),\r\n    fontWeight: \"500\",\r\n    color: theme.palette.text.primary,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: theme.typography.pxToRem(18),\r\n    },\r\n  },\r\n  headerMedium: {\r\n    fontSize: theme.typography.pxToRem(18),\r\n    fontWeight: \"500\",\r\n    color: theme.palette.text.primary,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n    },\r\n  },\r\n  summaryContent: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  summaryRoot: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      padding: \"0 8px\",\r\n    },\r\n  },\r\n  feelsLikeName: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  feelsLikeValueDay: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n}));\r\n\r\nfunction Daily({ stationData, setTabSelected }) {\r\n  useEffect(() => {\r\n    setTabSelected(2);\r\n  }, []);\r\n\r\n  const [settings] = useContext(SettingsContext);\r\n\r\n  const theme = useTheme();\r\n  const breakpointMatches = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CurrentWeatherWidget stationData={stationData} />\r\n      <Paper\r\n        elevation={4}\r\n        style={{ marginTop: theme.spacing(4), padding: theme.spacing(2) }}\r\n        className={classes.root}\r\n      >\r\n        {stationData.daily.map((entry, index) => {\r\n          const date = new Date(\r\n            (entry.dt + stationData.timezone_offset) * 1000\r\n          );\r\n\r\n          const day = date.toLocaleString(\"en-GB\", {\r\n            weekday: breakpointMatches ? \"short\" : \"long\",\r\n            day: \"2-digit\",\r\n          });\r\n\r\n          return (\r\n            <Accordion\r\n              TransitionProps={{ unmountOnExit: true }}\r\n              elevation={0}\r\n              key={index}\r\n              expanded={expanded === index}\r\n              onChange={handleChange(index)}\r\n            >\r\n              <AccordionSummary\r\n                classes={{\r\n                  content: classes.summaryContent,\r\n                  root: classes.summaryRoot,\r\n                }}\r\n                expandIcon={<ExpandMoreIcon />}\r\n              >\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    width: breakpointMatches ? \"40vw\" : \"min(35vw, 275px)\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      width: breakpointMatches ? 60 : 120,\r\n                      flexShrink: \"0\",\r\n                    }}\r\n                  >\r\n                    <Typography className={classes.headerDate}>\r\n                      {day}\r\n                    </Typography>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      marginLeft: breakpointMatches ? \"4vw\" : 25,\r\n                      width: 100,\r\n                      flexShrink: \"0\",\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Typography className={classes.headerLarge}>\r\n                      {settings.temperature === \"c\"\r\n                        ? Math.round(entry.temp.day - 273.15) + \"°C\"\r\n                        : settings.temperature === \"k\"\r\n                        ? Math.round(entry.temp.day) + \"K\"\r\n                        : Math.round((entry.temp.day * 9) / 5 - 459.67) + \"°F\"}\r\n                    </Typography>\r\n                    <Typography className={classes.headerMedium}>\r\n                      {\"\\u00A0/\\u00A0\"}\r\n                    </Typography>\r\n                    <Typography className={classes.headerSmall}>\r\n                      {settings.temperature === \"c\"\r\n                        ? Math.round(entry.temp.night - 273.15) + \"°C\"\r\n                        : settings.temperature === \"k\"\r\n                        ? Math.round(entry.temp.night) + \"K\"\r\n                        : Math.round((entry.temp.night * 9) / 5 - 459.67) +\r\n                          \"°F\"}\r\n                    </Typography>\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    flexBasis: breakpointMatches ? \"16.66%\" : \"40%\",\r\n                  }}\r\n                >\r\n                  <img\r\n                    style={{\r\n                      height: 32,\r\n                      width: 50,\r\n                      objectFit: \"cover\",\r\n                      backgroundColor:\r\n                        theme.palette.type === \"dark\" ? \"#909090\" : \"#DCDCDC\",\r\n                      borderRadius: 8,\r\n                    }}\r\n                    alt=\"icon\"\r\n                    src={`https://openweathermap.org/img/wn/${entry.weather[0].icon}@2x.png`}\r\n                  />\r\n                  {breakpointMatches || (\r\n                    <Typography\r\n                      style={{ textTransform: \"capitalize\", marginLeft: 10 }}\r\n                      className={classes.header}\r\n                    >\r\n                      {entry.weather[0].description}\r\n                    </Typography>\r\n                  )}\r\n                </div>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Paper\r\n                  variant=\"outlined\"\r\n                  style={{ width: \"100%\", padding: \"5px 20px\" }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      width: \"100%\",\r\n                      flexWrap: \"wrap\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        flexGrow: \"1\",\r\n                        margin: \"5px 0 5px\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          flexDirection: \"column\",\r\n                          width: 125,\r\n                        }}\r\n                      >\r\n                        <Typography className={classes.feelsLikeName}>\r\n                          Feels Like\r\n                        </Typography>\r\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                          <Typography\r\n                            className={classes.feelsLikeValueDay}\r\n                            variant=\"h5\"\r\n                            component=\"p\"\r\n                          >\r\n                            {settings.temperature === \"c\"\r\n                              ? Math.round(entry.feels_like.day - 273.15) + \"°C\"\r\n                              : settings.temperature === \"k\"\r\n                              ? Math.round(entry.feels_like.day) + \"K\"\r\n                              : Math.round(\r\n                                  (entry.feels_like.day * 9) / 5 - 459.67\r\n                                ) + \"°F\"}\r\n                          </Typography>\r\n                          <Typography className={classes.headerMedium}>\r\n                            {\"\\u00A0/\\u00A0\"}\r\n                          </Typography>\r\n                          <Typography className={classes.headerSmall}>\r\n                            {settings.temperature === \"c\"\r\n                              ? Math.round(entry.feels_like.night - 273.15) +\r\n                                \"°C\"\r\n                              : settings.temperature === \"k\"\r\n                              ? Math.round(entry.feels_like.night) + \"K\"\r\n                              : Math.round(\r\n                                  (entry.feels_like.night * 9) / 5 - 459.67\r\n                                ) + \"°F\"}\r\n                          </Typography>\r\n                        </div>\r\n                      </div>\r\n                      <DetailBox\r\n                        parameterName=\"Precipitation\"\r\n                        parameterValue={Math.round(entry.pop * 100) + \"%\"}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        flexGrow: \"1\",\r\n                        margin: \"5px 0 5px\",\r\n                      }}\r\n                    >\r\n                      <DetailBox\r\n                        parameterName=\"Humidity\"\r\n                        parameterValue={entry.humidity + \"%\"}\r\n                      />\r\n                      <DetailBox\r\n                        parameterName=\"Pressure\"\r\n                        parameterValue={\r\n                          settings.pressure === \"hpa\"\r\n                            ? entry.pressure + \" hPa\"\r\n                            : settings.pressure === \"atm\"\r\n                            ? Math.round((entry.pressure * 1000) / 1013.2501) /\r\n                                1000 +\r\n                              \" atm\"\r\n                            : Math.round((entry.pressure * 100) / 33.86) / 100 +\r\n                              \" inHg\"\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  ></div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      width: \"100%\",\r\n                      flexWrap: \"wrap\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        flexGrow: \"1\",\r\n                        margin: \"5px 0 5px\",\r\n                      }}\r\n                    >\r\n                      <DetailBox\r\n                        parameterName=\"Dew Point\"\r\n                        parameterValue={\r\n                          settings.temperature === \"c\"\r\n                            ? Math.round(entry.dew_point - 273.15) + \"°C\"\r\n                            : settings.temperature === \"k\"\r\n                            ? Math.round(entry.dew_point) + \"K\"\r\n                            : Math.round((entry.dew_point * 9) / 5 - 459.67) +\r\n                              \"°F\"\r\n                        }\r\n                      />\r\n                      <DetailBox\r\n                        parameterName=\"Clouds\"\r\n                        parameterValue={entry.clouds + \"%\"}\r\n                      />\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-around\",\r\n                        flexGrow: \"1\",\r\n                        margin: \"5px 0 5px\",\r\n                      }}\r\n                    >\r\n                      <DetailBox\r\n                        parameterName=\"Wind Speed\"\r\n                        parameterValue={\r\n                          settings.speed === \"ms\"\r\n                            ? Math.round(entry.wind_speed * 10) / 10 + \"m/s\"\r\n                            : settings.speed === \"kph\"\r\n                            ? Math.round(entry.wind_speed * 3.6 * 10) / 10 +\r\n                              \"kph\"\r\n                            : Math.round(entry.wind_speed * 2.237 * 10) / 10 +\r\n                              \"mph\"\r\n                        }\r\n                      />\r\n                      <DetailBox\r\n                        parameterName=\"Wind Direction\"\r\n                        parameterValue={entry.wind_deg + \"°\"}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  ></div>\r\n                </Paper>\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          );\r\n        })}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Daily;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Hourly.jsx",["122"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport CurrentWeatherWidget from \"./CurrentWeatherWidget\";\r\nimport {\r\n  makeStyles,\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Typography,\r\n  useTheme,\r\n  Paper,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport DetailBox from \"./DetailBox\";\r\nimport { SettingsContext } from \"../../App\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  header: {\r\n    fontSize: theme.typography.pxToRem(18),\r\n    color: theme.palette.text.primary,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n    },\r\n  },\r\n  headerLarge: {\r\n    fontSize: theme.typography.pxToRem(21),\r\n    fontWeight: \"500\",\r\n    color: theme.palette.text.primary,\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      fontSize: theme.typography.pxToRem(18),\r\n    },\r\n  },\r\n  summaryContent: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nfunction Hourly({ stationData, setTabSelected }) {\r\n  useEffect(() => {\r\n    setTabSelected(1);\r\n  }, []);\r\n\r\n  const [settings] = useContext(SettingsContext);\r\n\r\n  const theme = useTheme();\r\n  const breakpointMatches = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n  let prevDay;\r\n\r\n  return (\r\n    <>\r\n      <CurrentWeatherWidget stationData={stationData} />\r\n      <Paper\r\n        elevation={4}\r\n        style={{ marginTop: theme.spacing(4), padding: theme.spacing(2) }}\r\n        className={classes.root}\r\n      >\r\n        {stationData.hourly.slice(1).map((entry, index) => {\r\n          const date = new Date(\r\n            (entry.dt + stationData.timezone_offset) * 1000\r\n          );\r\n          const time = date.toLocaleString(\"en-GB\", {\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n            hourCycle: \"h23\",\r\n          });\r\n\r\n          const day = date.toLocaleString(\"en-GB\", {\r\n            weekday: \"long\",\r\n          });\r\n\r\n          let dayChange = !(prevDay === day);\r\n          prevDay = day;\r\n\r\n          const fullDate = date.toLocaleString(\"en-GB\", {\r\n            weekday: \"long\",\r\n            day: \"2-digit\",\r\n            month: \"long\",\r\n          });\r\n\r\n          return (\r\n            <React.Fragment key={index}>\r\n              {dayChange && (\r\n                <Typography\r\n                  style={{ margin: theme.spacing(2) }}\r\n                  component=\"p\"\r\n                  variant=\"h6\"\r\n                >\r\n                  {fullDate}\r\n                </Typography>\r\n              )}\r\n              <Accordion\r\n                TransitionProps={{ unmountOnExit: true }}\r\n                elevation={0}\r\n                expanded={expanded === index}\r\n                onChange={handleChange(index)}\r\n              >\r\n                <AccordionSummary\r\n                  classes={{ content: classes.summaryContent }}\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <Typography\r\n                      style={{ marginRight: breakpointMatches ? \"8vw\" : 75 }}\r\n                      className={classes.header}\r\n                    >\r\n                      {time}\r\n                    </Typography>\r\n                    <Typography className={classes.headerLarge}>\r\n                      {settings.temperature === \"c\"\r\n                        ? Math.round((entry.temp - 273.15) * 10) / 10 + \"°C\"\r\n                        : settings.temperature === \"k\"\r\n                        ? Math.round(entry.temp * 10) / 10 + \"K\"\r\n                        : Math.round(((entry.temp * 9) / 5 - 459.67) * 10) /\r\n                            10 +\r\n                          \"°F\"}\r\n                    </Typography>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      flexBasis: breakpointMatches ? \"16.66%\" : \"40%\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      style={{\r\n                        height: 32,\r\n                        width: 50,\r\n                        objectFit: \"cover\",\r\n                        backgroundColor:\r\n                          theme.palette.type === \"dark\" ? \"#909090\" : \"#DCDCDC\",\r\n                        borderRadius: 8,\r\n                      }}\r\n                      alt=\"icon\"\r\n                      src={`https://openweathermap.org/img/wn/${entry.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {breakpointMatches || (\r\n                      <Typography\r\n                        style={{ textTransform: \"capitalize\", marginLeft: 10 }}\r\n                        className={classes.header}\r\n                      >\r\n                        {entry.weather[0].description}\r\n                      </Typography>\r\n                    )}\r\n                  </div>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Paper\r\n                    variant=\"outlined\"\r\n                    style={{ width: \"100%\", padding: \"5px 20px\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        flexWrap: \"wrap\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-around\",\r\n                          flexGrow: \"1\",\r\n                          margin: \"5px 0 5px\",\r\n                        }}\r\n                      >\r\n                        <DetailBox\r\n                          parameterName=\"Feels Like\"\r\n                          parameterValue={\r\n                            settings.temperature === \"c\"\r\n                              ? Math.round((entry.feels_like - 273.15) * 10) /\r\n                                  10 +\r\n                                \"°C\"\r\n                              : settings.temperature === \"k\"\r\n                              ? Math.round(entry.feels_like * 10) / 10 + \"K\"\r\n                              : Math.round(\r\n                                  ((entry.feels_like * 9) / 5 - 459.67) * 10\r\n                                ) /\r\n                                  10 +\r\n                                \"°F\"\r\n                          }\r\n                        />\r\n                        <DetailBox\r\n                          parameterName=\"Precipitation\"\r\n                          parameterValue={Math.round(entry.pop * 100) + \"%\"}\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-around\",\r\n                          flexGrow: \"1\",\r\n                          margin: \"5px 0 5px\",\r\n                        }}\r\n                      >\r\n                        <DetailBox\r\n                          parameterName=\"Humidity\"\r\n                          parameterValue={entry.humidity + \"%\"}\r\n                        />\r\n                        <DetailBox\r\n                          parameterName=\"Pressure\"\r\n                          parameterValue={\r\n                            settings.pressure === \"hpa\"\r\n                              ? entry.pressure + \" hPa\"\r\n                              : settings.pressure === \"atm\"\r\n                              ? Math.round(\r\n                                  (entry.pressure * 1000) / 1013.2501\r\n                                ) /\r\n                                  1000 +\r\n                                \" atm\"\r\n                              : Math.round((entry.pressure * 100) / 33.86) /\r\n                                  100 +\r\n                                \" inHg\"\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        width: \"100%\",\r\n                      }}\r\n                    ></div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        flexWrap: \"wrap\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-around\",\r\n                          flexGrow: \"1\",\r\n                          margin: \"5px 0 5px\",\r\n                        }}\r\n                      >\r\n                        <DetailBox\r\n                          parameterName=\"Visibility\"\r\n                          parameterValue={\r\n                            entry.visibility >= 10000\r\n                              ? settings.distance === \"m\"\r\n                                ? \">\" + entry.visibility + \"m\"\r\n                                : settings.distance === \"km\"\r\n                                ? \">\" +\r\n                                  Math.round((entry.visibility * 10) / 1000) /\r\n                                    10 +\r\n                                  \"km\"\r\n                                : \">\" +\r\n                                  Math.round((entry.visibility * 10) / 1609) /\r\n                                    10 +\r\n                                  \"mi\"\r\n                              : settings.distance === \"m\"\r\n                              ? entry.visibility + \"m\"\r\n                              : settings.distance === \"km\"\r\n                              ? Math.round((entry.visibility * 10) / 1000) /\r\n                                  10 +\r\n                                \"km\"\r\n                              : Math.round((entry.visibility * 10) / 1609) /\r\n                                  10 +\r\n                                \"mi\"\r\n                          }\r\n                        />\r\n                        <DetailBox\r\n                          parameterName=\"Clouds\"\r\n                          parameterValue={entry.clouds + \"%\"}\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"space-around\",\r\n                          flexGrow: \"1\",\r\n                          margin: \"5px 0 5px\",\r\n                        }}\r\n                      >\r\n                        <DetailBox\r\n                          parameterName=\"Wind Speed\"\r\n                          parameterValue={\r\n                            settings.speed === \"ms\"\r\n                              ? Math.round(entry.wind_speed * 10) / 10 + \"m/s\"\r\n                              : settings.speed === \"kph\"\r\n                              ? Math.round(entry.wind_speed * 3.6 * 10) / 10 +\r\n                                \"kph\"\r\n                              : Math.round(entry.wind_speed * 2.237 * 10) / 10 +\r\n                                \"mph\"\r\n                          }\r\n                        />\r\n                        <DetailBox\r\n                          parameterName=\"Wind Direction\"\r\n                          parameterValue={entry.wind_deg + \"°\"}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        width: \"100%\",\r\n                      }}\r\n                    ></div>\r\n                  </Paper>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Hourly;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Map.jsx",["123"],"import React, { useEffect, useRef, useContext, useState } from \"react\";\r\nimport { useTheme, useMediaQuery, Paper } from \"@material-ui/core\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { ApiKeysContext } from \"../../App\";\r\n\r\nfunction rotateCamera(timestamp, offset, playAnimation, map, iteration) {\r\n  if (iteration === 2) {\r\n    offset = timestamp;\r\n  }\r\n  // clamp the rotation between 0 -360 degrees\r\n  // Divide timestamp by 100 to slow rotation to ~10 degrees / sec\r\n  map.current.rotateTo(((timestamp - offset) / 450) % 360, { duration: 0 });\r\n\r\n  playAnimation.current &&\r\n    requestAnimationFrame((timestamp) =>\r\n      rotateCamera(timestamp, offset, playAnimation, map, iteration + 1)\r\n    );\r\n}\r\n\r\nfunction Map({ coords }) {\r\n  const theme = useTheme();\r\n  const map = useRef();\r\n  const locationMarker = useRef();\r\n\r\n  const playAnimation = useRef(true);\r\n\r\n  const API_KEY_MAPBOX = useContext(ApiKeysContext).API_KEY_MAPBOX;\r\n\r\n  const breakpointMatches = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const breakpointMatchesPersist = useRef(breakpointMatches);\r\n  breakpointMatchesPersist.current = breakpointMatches;\r\n  const [heightOfMap, setHeightOfMap] = useState(0);\r\n\r\n  useEffect(() => {\r\n    function eventListenerFunction() {\r\n      const mapContainer = document.querySelector(\"#map\");\r\n      setHeightOfMap(\r\n        breakpointMatchesPersist.current\r\n          ? mapContainer.clientWidth / 2\r\n          : mapContainer.clientWidth\r\n      );\r\n      map.current.resize();\r\n    }\r\n    window.addEventListener(\"resize\", eventListenerFunction);\r\n    return () => window.removeEventListener(\"resize\", eventListenerFunction);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!map.current) {\r\n      mapboxgl.accessToken = API_KEY_MAPBOX;\r\n\r\n      map.current = new mapboxgl.Map({\r\n        container: \"map\",\r\n        style:\r\n          theme.palette.type === \"dark\"\r\n            ? \"mapbox://styles/mapbox/dark-v10\"\r\n            : \"mapbox://styles/mapbox/light-v10\",\r\n        center: [coords.lon, coords.lat],\r\n        zoom: 10,\r\n        pitch: 45,\r\n        bearing: 0,\r\n        attributionControl: false,\r\n      });\r\n\r\n      map.current.on(\"load\", () => {\r\n        // Start the animation.\r\n        rotateCamera(0, 0, playAnimation, map, 1);\r\n        const mapContainer = document.querySelector(\"#map\");\r\n        setHeightOfMap(\r\n          breakpointMatchesPersist.current\r\n            ? mapContainer.clientWidth / 2\r\n            : mapContainer.clientWidth\r\n        );\r\n        map.current.resize();\r\n      });\r\n\r\n      map.current.addControl(\r\n        new mapboxgl.NavigationControl({\r\n          visualizePitch: true,\r\n        })\r\n      );\r\n    } else {\r\n      map.current.setStyle(\r\n        theme.palette.type === \"dark\"\r\n          ? \"mapbox://styles/mapbox/dark-v10\"\r\n          : \"mapbox://styles/mapbox/light-v10\"\r\n      );\r\n    }\r\n\r\n    locationMarker.current?.remove();\r\n    locationMarker.current = new mapboxgl.Marker({\r\n      color: theme.palette.primary.main,\r\n    })\r\n      .setLngLat([coords.lon, coords.lat])\r\n      .addTo(map.current);\r\n  }, [theme]);\r\n\r\n  useEffect(() => () => (playAnimation.current = false), []);\r\n\r\n  return (\r\n    <Paper\r\n      elevation={4}\r\n      id=\"map\"\r\n      style={{ width: \"100%\", height: heightOfMap }}\r\n      onMouseDown={() => (playAnimation.current = false)}\r\n    ></Paper>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\CurrentWeatherWidget.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\DetailBox.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\HourlyWidget.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\Today.jsx",["124"],"import React, { useEffect } from \"react\";\r\nimport CurrentWeatherWidget from \"./CurrentWeatherWidget\";\r\nimport HourlyWidget from \"./HourlyWidget\";\r\nimport DailyWidget from \"./DailyWidget\";\r\nimport AdditionalInfoWidget from \"./AdditionalInfoWidget\";\r\n\r\nfunction Current({ stationData, setTabSelected }) {\r\n  useEffect(() => {\r\n    setTabSelected(0);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <CurrentWeatherWidget stationData={stationData} />\r\n      <AdditionalInfoWidget stationData={stationData} />\r\n      <HourlyWidget stationData={stationData} />\r\n      <DailyWidget stationData={stationData} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Current;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\DailyWidget.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\AdditionalInfoWidget.jsx",[],"C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\SunriseSunset.jsx",["125"],"import React, { useEffect, useRef } from \"react\";\r\nimport { Sunrise } from \"@styled-icons/feather/Sunrise\";\r\nimport { Sunset } from \"@styled-icons/feather/Sunset\";\r\nimport { Paper, Typography, useMediaQuery, useTheme } from \"@material-ui/core\";\r\n\r\nfunction resizeFunction(canvas, canvasContainer, upscaleRes) {\r\n  canvas.width = upscaleRes * canvasContainer.offsetWidth;\r\n  canvas.height = canvas.width * 0.4;\r\n  canvas.style.width = `${canvas.width / upscaleRes}px`;\r\n  canvas.style.height = `${canvas.height / upscaleRes}px`;\r\n}\r\n\r\nfunction draw(canvas, sunriseUnix, sunsetUnix, currentTime, theme) {\r\n  if (canvas) {\r\n    const c = canvas.getContext(\"2d\");\r\n    c.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    c.lineCap = \"round\";\r\n    c.lineWidth = canvas.width / 20;\r\n\r\n    c.beginPath();\r\n    c.arc(\r\n      canvas.width / 2,\r\n      (canvas.height * 23) / 24,\r\n      canvas.width / 3,\r\n      -Math.PI,\r\n      0\r\n    );\r\n    c.strokeStyle =\r\n      theme.palette.type === \"dark\"\r\n        ? \"rgba(255,255,255,0.2)\"\r\n        : \"rgba(0,0,0,0.2)\";\r\n    c.stroke();\r\n\r\n    const range = sunsetUnix - sunriseUnix;\r\n    let percentOfDay = (currentTime - sunriseUnix) / range;\r\n    percentOfDay = percentOfDay > 1 ? 1 : percentOfDay;\r\n\r\n    c.lineWidth = canvas.width / 40;\r\n    c.beginPath();\r\n    percentOfDay > 1 / 90 &&\r\n      c.arc(\r\n        canvas.width / 2,\r\n        (canvas.height * 23) / 24,\r\n        canvas.width / 3,\r\n        -Math.PI + Math.PI / 180,\r\n        -Math.PI + Math.PI * percentOfDay - Math.PI / 180\r\n      );\r\n\r\n    const gradient = c.createLinearGradient(\r\n      0,\r\n      0,\r\n      (Math.PI * canvas.width) / 3,\r\n      0\r\n    );\r\n    gradient.addColorStop(0, \"rgba(238,118,0, 0.8)\");\r\n    gradient.addColorStop(0.5, \"rgba(255,244,79, 0.8)\");\r\n    gradient.addColorStop(1, \"rgba(0,33,71, 0.8)\");\r\n\r\n    c.strokeStyle = gradient;\r\n    c.stroke();\r\n  }\r\n}\r\n\r\nfunction SunriseSunset({\r\n  sunriseInUnix,\r\n  sunsetInUnix,\r\n  timezone_offset,\r\n  currentTime,\r\n}) {\r\n  const canvasContainerRef = useRef();\r\n  const canvasRef = useRef();\r\n  const sunriseRef = useRef();\r\n  const sunsetRef = useRef();\r\n\r\n  const theme = useTheme();\r\n  const breakpointMatches = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n  const themePersist = useRef(theme);\r\n  themePersist.current = theme;\r\n\r\n  useEffect(() => {\r\n    const upscaleRes = 2;\r\n    resizeFunction(canvasRef.current, canvasContainerRef.current, upscaleRes);\r\n\r\n    sunriseRef.current.style.width = canvasContainerRef.current.offsetWidth / 6;\r\n    sunsetRef.current.style.width = canvasContainerRef.current.offsetWidth / 6;\r\n  }, [breakpointMatches]);\r\n\r\n  const rerender = useRef(true);\r\n\r\n  function render() {\r\n    draw(\r\n      canvasRef.current,\r\n      sunriseInUnix,\r\n      sunsetInUnix,\r\n      currentTime,\r\n      themePersist.current\r\n    );\r\n    rerender.current && requestAnimationFrame(render);\r\n  }\r\n\r\n  useEffect(() => {\r\n    render();\r\n    return () => {\r\n      rerender.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const dateSunrise = new Date((sunriseInUnix + timezone_offset) * 1000);\r\n  const timeSunrise = dateSunrise.toLocaleString(\"en-GB\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hourCycle: \"h23\",\r\n  });\r\n\r\n  const dateSunset = new Date((sunsetInUnix + timezone_offset) * 1000);\r\n  const timeSunset = dateSunset.toLocaleString(\"en-GB\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    hourCycle: \"h23\",\r\n  });\r\n\r\n  return (\r\n    <Paper\r\n      variant=\"outlined\"\r\n      style={{\r\n        padding: theme.spacing(1),\r\n        width: breakpointMatches ? 137 : 150,\r\n        height: breakpointMatches ? 110 : 120,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <div ref={canvasContainerRef}>\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            marginLeft: breakpointMatches ? 0 : 2,\r\n          }}\r\n        >\r\n          <Sunrise ref={sunriseRef} />\r\n          <Typography>{timeSunrise}</Typography>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            marginRight: breakpointMatches ? 0 : 2,\r\n          }}\r\n        >\r\n          <Sunset ref={sunsetRef} />\r\n          <Typography>{timeSunset}</Typography>\r\n        </div>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default SunriseSunset;\r\n","C:\\Users\\Jed\\Desktop\\weather-app-react\\src\\components\\main_page\\DetailList.jsx",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":14,"column":54,"nodeType":"132","endLine":14,"endColumn":56,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"134","line":136,"column":54,"nodeType":"132","endLine":136,"endColumn":56,"suggestions":"135"},{"ruleId":"130","severity":1,"message":"136","line":138,"column":54,"nodeType":"132","endLine":138,"endColumn":56,"suggestions":"137"},{"ruleId":"130","severity":1,"message":"138","line":164,"column":6,"nodeType":"132","endLine":164,"endColumn":23,"suggestions":"139"},{"ruleId":"130","severity":1,"message":"136","line":216,"column":6,"nodeType":"132","endLine":216,"endColumn":8,"suggestions":"140"},{"ruleId":"130","severity":1,"message":"141","line":121,"column":6,"nodeType":"132","endLine":121,"endColumn":8,"suggestions":"142"},{"ruleId":"130","severity":1,"message":"143","line":47,"column":6,"nodeType":"132","endLine":47,"endColumn":8,"suggestions":"144"},{"ruleId":"130","severity":1,"message":"145","line":71,"column":6,"nodeType":"132","endLine":71,"endColumn":8,"suggestions":"146"},{"ruleId":"130","severity":1,"message":"145","line":45,"column":6,"nodeType":"132","endLine":45,"endColumn":8,"suggestions":"147"},{"ruleId":"130","severity":1,"message":"148","line":97,"column":6,"nodeType":"132","endLine":97,"endColumn":13,"suggestions":"149"},{"ruleId":"130","severity":1,"message":"145","line":10,"column":6,"nodeType":"132","endLine":10,"endColumn":8,"suggestions":"150"},{"ruleId":"130","severity":1,"message":"151","line":107,"column":6,"nodeType":"132","endLine":107,"endColumn":8,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setErrorStateGeoCoordField'. Either include it or remove the dependency array. If 'setErrorStateGeoCoordField' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["155"],"React Hook useEffect has a missing dependency: 'setErrorStateCityNameField'. Either include it or remove the dependency array. If 'setErrorStateCityNameField' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["156"],"React Hook useEffect has a missing dependency: 'setSuggestionCurrentlySelected'. Either include it or remove the dependency array. If 'setSuggestionCurrentlySelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["157"],"React Hook useEffect has missing dependencies: 'executingAutocompleteLookup' and 'setListOfSuggestions'. Either include them or remove the dependency array. If 'setListOfSuggestions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["158"],["159"],"React Hook useEffect has a missing dependency: 'props.executingAutocompleteLookup'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has missing dependencies: 'API_KEY', 'history', and 'match.params.id'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'setTabSelected'. Either include it or remove the dependency array. If 'setTabSelected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["162"],["163"],"React Hook useEffect has missing dependencies: 'API_KEY_MAPBOX', 'coords.lat', and 'coords.lon'. Either include them or remove the dependency array.",["164"],["165"],"React Hook useEffect has a missing dependency: 'render'. Either include it or remove the dependency array.",["166"],"no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"171","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"180","fix":"182"},{"desc":"183","fix":"184"},{"desc":"180","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [setErrorStateGeoCoordField]",{"range":"188","text":"189"},"Update the dependencies array to be: [setErrorStateCityNameField]",{"range":"190","text":"191"},"Update the dependencies array to be: [setSuggestionCurrentlySelected]",{"range":"192","text":"193"},"Update the dependencies array to be: [cityNameInField, executingAutocompleteLookup, setListOfSuggestions]",{"range":"194","text":"195"},{"range":"196","text":"193"},"Update the dependencies array to be: [props.executingAutocompleteLookup]",{"range":"197","text":"198"},"Update the dependencies array to be: [API_KEY, history, match.params.id]",{"range":"199","text":"200"},"Update the dependencies array to be: [setTabSelected]",{"range":"201","text":"202"},{"range":"203","text":"202"},"Update the dependencies array to be: [API_KEY_MAPBOX, coords.lat, coords.lon, theme]",{"range":"204","text":"205"},{"range":"206","text":"202"},"Update the dependencies array to be: [render]",{"range":"207","text":"208"},[471,473],"[setErrorStateGeoCoordField]",[3675,3677],"[setErrorStateCityNameField]",[3736,3738],"[setSuggestionCurrentlySelected]",[4475,4492],"[cityNameInField, executingAutocompleteLookup, setListOfSuggestions]",[6149,6151],[3450,3452],"[props.executingAutocompleteLookup]",[1748,1750],"[API_KEY, history, match.params.id]",[1814,1816],"[setTabSelected]",[1146,1148],[3103,3110],"[API_KEY_MAPBOX, coords.lat, coords.lon, theme]",[354,356],[2982,2984],"[render]"]